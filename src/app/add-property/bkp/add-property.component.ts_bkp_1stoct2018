import { Component, OnInit, ViewChild } from '@angular/core';
import { TabsetComponent } from 'ngx-bootstrap';
import { Property } from './property';
import { Contact }    from './contact';
import { Video }    from './video';
import { Router, NavigationStart , ActivatedRoute, Params} from '@angular/router';
import { AlertService } from '../services/alert.service';
//lang
import { TranslateService } from '@ngx-translate/core';
//lang
import { CommonServiceService } from '../services/common-service.service';
import {MatSnackBar} from '@angular/material';  // using for toast message

@Component({
  selector: 'app-add-property',
  templateUrl: './add-property.component.html',
  styleUrls: ['./add-property.component.css']
})
export class AddPropertyComponent implements OnInit {

// Google Autocomplete
public userSettings4: any = { showSearchButton: false };    
autoCompleteCallback1(selectedLocationData:any) {
    console.log(selectedLocationData,'selectedLocationData change');
    this.model.prop_address=selectedLocationData.data.description;
    this.model.latitude=selectedLocationData.data.geometry.location.lat;
    this.model.longitude=selectedLocationData.data.geometry.location.lng;
} 
	
otherInput: boolean;
  real_estate_agents = ['Agent', 'Relator/Real State Developer', 'Owner'];
	propertyYes: boolean;
	propertyNo: boolean;
  contacts: Array<Contact>;
  AllLanguage:any;
    addContact(other){
        let contact = new Contact(other);
        this.contacts.push(contact);
        console.log(this.contacts,'this.contacts');
    }

    removeContact(contact){
        let index = this.contacts.indexOf(contact);
        this.contacts.splice(index,1);

      
    }
	
    videos: Array<Video>;
    addVideo(othervideo){
        if(this.videos.length >=2) {
            this.openSnackBar("Error", "Can't add more than 2 videos")
        } else {
            let video = new Video(othervideo);
            this.videos.push(video);
        }
        
    }

    removeVideo(video){
        let indexvideo = this.videos.indexOf(video);
        this.videos.splice(indexvideo,1);
    }
	

@ViewChild('propertyTabs') propertyTabs: TabsetComponent;
loginData:any;
selectTab(tab_id: number,propertyForm) {
  console.log(propertyForm,'Form data');
  this.propertyTabs.tabs[tab_id].active = true;
  window.scrollTo(0, 0)
}
 
    
  urls = [];
  prop_images=[];
  urls_cover = [];
  prop_images_cover=[];
  exist_prop_images=[];

  detectFiles(event) {
    //this.urls = [];
    let files = event.target.files;
    
    if (files) {
		
       for(let i =0; i < files.length; i++){
       let file=files[i];
       this.prop_images.push(file);

        let reader = new FileReader();
        reader.onload = (e: any) => {
			  let extension = file.name.split('.').pop().toLowerCase();
          this.urls.push({'type':extension,'src':e.target.result,'exist':0});
        }
        reader.readAsDataURL(file);
      }
	  console.log(this.prop_images,'this.prop_images');
    }
  }


  detectFilesCover(event) {
    //this.urls = [];
    let files = event.target.files;
    
    if (files) {
    
       for(let i =0; i < files.length; i++){
       let file=files[i];
       this.prop_images_cover=[file];
       this.prop_images[0]=file;

        let reader = new FileReader();
        reader.onload = (e: any) => {
        let extension = file.name.split('.').pop().toLowerCase();
          this.urls_cover=[{'type':extension,'src':e.target.result,'exist':0}];
        }
        reader.readAsDataURL(file);
      }
    console.log(this.prop_images_cover,'this.prop_images_cover');
    }
  }
  
  property_types = ['Really Smart', 'Super Flexible', 'Super Hot', 'Weather Changer'];
  //provinces = ['Provinces', 'Provinces', 'Provinces', 'Provinces'];
  //cities = ['City', 'City', 'City', 'City'];
  //zones = ['Zone', 'Zone', 'Zone', 'Zone'];
  bedrooms = ['0', '1', '2', '3','4','5','6','7','8','9','10'];
  baths = ['0', '1', '2', '3','4','5','6','7','8','9','10'];
  halfBaths = ['0', '1', '2', '3','4','5','6','7','8','9','10'];
  garages = ['0', '1', '2', '3','4','5','6','7','8','9','10'];
  
  model = new Property('','Sell', '', '', '', '', '', '', '', '', '', '', '', '', '', 'Phone and Email', '','','', '', '', '', '', 1, 1, 1, 1, 'Good Shape',[],[],'','','','Agent','yes');

  submitted = false;
  
  

  // TODO: Remove this when we're done
  get diagnostic() { return JSON.stringify(this.model); }

  propertyTypes:any;
  provinces:any;
  cities:any;
  zones:any;

  propertyId:number;
  propertyDetails:any;

  constructor(private commonService: CommonServiceService,private alertService: AlertService,private router: Router,private route : ActivatedRoute, public snackBar: MatSnackBar) { 
    this.contacts = [];
	this.videos = [];
    this.loginData=JSON.parse(this.commonService.loginData);

    this.commonService.get('getPropertyTypes').subscribe((res)=>{
        console.log(res,'getPropertyTypes');
        this.propertyTypes=res.data;

    });
    this.commonService.get('getProvinces').subscribe((res)=>{
        console.log(res,'getProvinces');
        this.provinces=res.data;

    });
    this.commonService.get('getCities').subscribe((res)=>{
        console.log(res,'getCities');
        this.cities=res.data;

    });
    this.commonService.get('getZones').subscribe((res)=>{
        console.log(res,'getZones');
        this.zones=res.data;

    });

    this.commonService.get('getAllLanguage').subscribe((res)=>{
      //console.log(res);
      console.log(res,'getAllLanguage');
      this.AllLanguage=res.data;
  
  });

  }
  
  // material snackbar toast message
  openSnackBar(message: string, action: string) {
    this.snackBar.open(message, action, {
      duration: 5000,
      horizontalPosition: 'center',
      verticalPosition: 'top',
    });
    
  }
  
  filteredCities:any;
  filteredZones:any;

  ngOnInit() {
	 
    this.route.params.forEach(
       (params : Params) => {
           this.propertyId = params["id"];
       }
    );
    if(this.propertyId){
      console.log(this.propertyId,'edit property id');
      this.commonService.post('getPropertyDetails',{prop_id:this.propertyId}).subscribe((res)=>{
          let Jres=JSON.parse(res._body);
          this.model=Jres.data;
          if(Jres.data.province_id){
             this.filteredCities=this.transform(this.cities,String(Jres.data.province_id));
          }
          if(Jres.data.city_id){
             this.filteredZones=this.transform(this.zones,String(Jres.data.city_id));
          }
          this.model.other_character=JSON.parse(Jres.data.other_character);

          if(Jres.data.all_images.length>0){
             for(let i=0;i<Jres.data.all_images.length;i++){
              let src=this.commonService.getImgSrc(Jres.data.all_images[i]);
              let extension=Jres.data.all_images[i].extension;
              if(i==0){
                 this.urls_cover.push({'type':extension,'src':src,'exist':Jres.data.all_images[i].id});
              }else{
                 this.urls.push({'type':extension,'src':src,'exist':Jres.data.all_images[i].id});
              }
              

              this.exist_prop_images.push(Jres.data.all_images[i].id);
             }    
        }
        
        
                                
          console.log(Jres.data.city_id,this.filteredCities,' after parse getPropertyDetails Jres.data.city_id is');                      
          console.log(this.exist_prop_images,' after parse getPropertyDetails exist_prop_images is');
          console.log(this.model,' after parse getPropertyDetails model is');
          console.log(this.urls,' after parse getPropertyDetails urls is');
          console.log(this.urls_cover,' after parse getPropertyDetails urls_cover is');

          if(Jres.data.chracter_other){
          this.otherInput=true;
          let other=JSON.parse(Jres.data.chracter_other);
          for(let v=0;v<other.length;v++){
            this.addContact(other[v]);
          }
          }
          if(Jres.data.video_urls){
           let videos=JSON.parse(Jres.data.video_urls);
            for(let i=0;i<videos.length;i++){
               this.addVideo(videos[i]);
            }
            }
      });

     

    }else{
     this.commonService.post('checkUserSubscription',{user_id:this.loginData.id}).subscribe((res)=>{
      console.log(res,'checkUserSubscription');
      let Jres=JSON.parse(res._body);
      if(Jres.Ack==0){
        this.alertService.success('Sorry your property can not be uploaded as you do not have a valid subscription. Please subscribe a paln to upload your properties.', true);
        this.activeClass = "";
        this.router.navigateByUrl('subscription');
      }else{
        this.activeClass = "";
      }
  
  });
    }


    this.commonService.getStaticPageData({'page_type':'add_property'}).subscribe((res)=>{
        //console.log(res);
        this.commonService.updateTitle(res.data.meta_title_en);
        this.commonService.updateDescription(res.data.meta_desc_en);
    });
    
  }
    
    
  
  changeProvince(selectedProvince:any){
      this.filteredCities=this.transform(this.cities,selectedProvince.target.value);
  }

  changeCity(selectedCity:any){
      this.filteredZones=this.transform1(this.zones,selectedCity.target.value);
  }

  transform(items: any[], race: any): any {
    let filteredArray = items.filter(function(itm){
      console.log(race,'race');
      return race.indexOf(itm.province_id) > -1;
    });
    return filteredArray;
  }

  transform1(items: any[], race: any): any {
    let filteredArray = items.filter(function(itm){
      console.log(race,'race');
      return race.indexOf(itm.city_id) > -1;
    });
    return filteredArray;
  }
activeClass = "";
  updateSelectedCharacters(event) {
    console.log(event);
    this.model.other_character = this.model.other_character || [];
    if (event.target.checked) {
          if (this.model.other_character.indexOf(event.target.name) < 0) { 
                this.model.other_character.push(event.target.name);

          }
     } else {
           if (this.model.other_character.indexOf(event.target.name) > -1) 
            {
                this.model.other_character.splice(this.model.other_character.indexOf(event.target.name), 1);              
            }
    }
    console.log("model.other_character: ", this.model.other_character);    
  }


  onSubmit() {
    
   console.log(this.videos,'videos');
   console.log(this.model,'onSubmit1');
   this.activeClass = "active";
   let _formData: FormData = new FormData();
   if(this.propertyId){
      _formData.append('prop_id', String(this.propertyId));
   }else{
       _formData.append('prop_id', '');
   }
    _formData.append('user_id', this.loginData.id);
    for ( let key in this.model ) {
        _formData.append(key, this.model[key]);
    }
   _formData.append('existFiles',this.exist_prop_images.toString());

   _formData.append('fileLength',String(this.prop_images.length));

   
   for(let i=0;i<this.prop_images.length;i++){
      _formData.append('MyFile'+i, this.prop_images[i], this.prop_images[i].name);
   }

   let chracter_other=[];
   for(let i=0;i<this.contacts.length;i++){
      chracter_other.push(this.contacts[i].other);
   }
  _formData.append('chracter_other',chracter_other.toString());

  

   let othervideo=[];
   for(let i=0;i<this.videos.length;i++){
      othervideo.push(this.videos[i].othervideo);
   }
 _formData.append('video_urls',othervideo.toString());


    console.log(_formData,'_formData');
   this.commonService.uploadProperty(_formData).subscribe((res)=>{
        console.log(res,'uploadProperty');
        if(res.Ack==0){
          this.alertService.success('Sorry your property can not be uploaded as you do not have a valid subscription. Please subscribe a paln to upload your properties.', true);
          this.activeClass = "";
          this.router.navigateByUrl('subscription');
        }else{
          if(this.propertyId){
            this.alertService.success('Property updated successful', true);
            
          }else{
            this.alertService.success('Property added successful please verify owner email to approve the property.', true);
            
          }

          this.activeClass = "";
          this.router.navigateByUrl('profile');
        }
		
    });
  }

  removeFile(fileIndex:number,exist_img:number) {

    if(confirm('Are you sure to remove this file?')){


    console.log(fileIndex,exist_img,'remove file fileIndex');
    
    this.urls.splice(fileIndex, 1);
    if(this.exist_prop_images.length>0 && exist_img>0){
       for(let i=0;i<this.exist_prop_images.length;i++){
          if(this.exist_prop_images[i]==exist_img){
             this.exist_prop_images.splice(i, 1);
          }
          
       }
    }
    
    console.log(this.exist_prop_images,'this.exist_prop_images after remove');  
    }     
  }


  removeFileCover(fileIndex:number,exist_img:number) {

    if(confirm('Are you sure to remove this file?')){


    console.log(fileIndex,exist_img,'remove file fileIndex');
    
    this.urls_cover.splice(fileIndex, 1);
    if(this.exist_prop_images.length>0 && exist_img>0){
       for(let i=0;i<this.exist_prop_images.length;i++){
          if(this.exist_prop_images[i]==exist_img){
             this.exist_prop_images.splice(i, 1);
          }
          
       }
    }
    
    console.log(this.exist_prop_images,'this.exist_prop_images after remove');  
    }     
  }

chracter_other:any=[];
  onBlurMethod(event){
    console.log(event.target.value,'onBlurMethod event');
    this.chracter_other.push(event.target.value);
    console.log(this.chracter_other,' this.chracter_other');
  }
  

 
}
