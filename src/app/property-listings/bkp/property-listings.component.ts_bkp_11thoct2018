import { Component, OnInit, ViewChild, AfterViewInit  } from '@angular/core';
import {FormBuilder, FormGroup} from '@angular/forms';
import {Observable} from 'rxjs';
import {startWith, map} from 'rxjs/operators';
import { Router, NavigationStart , ActivatedRoute, Params} from '@angular/router';
import { SearchField } from './searchField';
import {CreateNewAutocompleteGroup, SelectedAutocompleteItem, NgAutocompleteComponent} from "ng-auto-complete";



export interface StateGroup {
  letter: string;
  names: string[];
}
export interface minPrice {
  value: string;
  viewValue: string;
}
export interface maxPrice {
  value: string;
  viewValue: string;
}

export const _filter = (opt: string[], value: string): string[] => {
  const filterValue = value.toLowerCase();

  return opt.filter(item => item.toLowerCase().indexOf(filterValue) === 0);
};

import { Property }    from './property';

import { CommonServiceService } from '../services/common-service.service';

import { GoogleMapsAPIWrapper, AgmMap, LatLngBounds, LatLngBoundsLiteral} from '@agm/core';

declare var google: any

@Component({
  selector: 'app-property-listings',
  templateUrl: './property-listings.component.html',
  styleUrls: ['./property-listings.component.css']
})
export class PropertyListingsComponent implements OnInit {
  @ViewChild(NgAutocompleteComponent) public completer: NgAutocompleteComponent;
    
    /*public group = [
        CreateNewAutocompleteGroup(
            'Search / choose in / from list',
            'completer',
            [
                {title: 'Option 1', id: '1'},
                {title: 'Option 2', id: '2'},
                {title: 'Option 3', id: '3'},
                {title: 'Option 4', id: '4'},
                {title: 'Option 5', id: '5'},
            ],
            {titleKey: 'title', childrenKey: null}
        ),
    ];
    Selected(item: SelectedAutocompleteItem) {
        console.log(item);
    }*/
	
	
  minPrices: minPrice[] = [
    {value: '50', viewValue: '50 $'},
    {value: '100', viewValue: '100 $'},
    {value: '250', viewValue: '150 $'},
	{value: '200', viewValue: '200 $'},
	{value: '250', viewValue: '250 $'}
  ];
  maxPrices: maxPrice[] = [
    {value: '500', viewValue: '500 $'},
    {value: '1000', viewValue: '1000 $'},
    {value: '1500', viewValue: '1500 $'},
	{value: '2000', viewValue: '2000 $'},
	{value: '2500', viewValue: '2500 $'}
  ];
  propertyItems = [
	  {
		'topic':'heading1',
		'elements':[
			{'id':'0', 'name':'option1'},
			{'id':'1', 'name':'option2'},
			{'id':'2', 'name':'option3'},
			{'id':'3', 'name':'option4'},
			{'id':'4', 'name':'option5'},
			{'id':'5', 'name':'option6'}
		]
	  },
	  {
		'topic':'heading2',
		'elements':[
			{'id':'6', 'name':'option7'},
			{'id':'7', 'name':'option8'},
			{'id':'8', 'name':'option9'},
			{'id':'9', 'name':'option10'},
			{'id':'10', 'name':'option11'},
			{'id':'11', 'name':'option12'}
		]
	}
  ];


  @ViewChild('AgmMap') agmMap: AgmMap;

search = new SearchField('Sell','',[],'','');
  propertyTypes:any;
  settingsData={};
  property_types = ['Property Type', '2', '3', '4'];
  budgets = ['Budget', '2', '3', '4'];
  model = new Property('', '', '');
  submitted = false;
 
 
  zoom: number = 8;
  
  // initial center position for the map
  lat: number = 51.673858;
  lng: number = 7.815982;

  clickedMarker(label: string, index: number) {
    console.log(`clicked the marker: ${label || index}`)
  }
  
 
  
  markerDragEnd(m: marker, $event: MouseEvent) {
    console.log('dragEnd', m, $event);
  }
  
  markers: marker[] = [
	  {
		  latitude: 51.673858,
		  longitude: 7.815982,
		  label: 'A',
		  draggable: true
	  },
	  {
		  latitude: 51.373858,
		  longitude: 7.215982,
		  label: 'B',
		  draggable: false
	  },
	  {
		  latitude: 51.723858,
		  longitude: 7.895982,
		  label: 'C',
		  draggable: true
	  }
  ]
  autoGroups= [];
  properties=[];
  //markers=[];
propertyType:any;
AllLanguage:any;
  constructor(private commonService: CommonServiceService, private fb: FormBuilder,private route : ActivatedRoute) {
     
	this.commonService.showLoader();
    this.commonService.getData().subscribe((res)=>{
        
        this.settingsData=res.data;
        console.log(this.settingsData,' after parse all properties settingsData');

    });

   

    route.params.forEach(
           (params : Params) => {
               this.search.type = params["type"];
               this.search.autoField = params["auto"];
               this.search.propertyType = params["prop"];
               this.search.minPrice = params["minPrc"];
               this.search.maxPrice = params["maxPrc"];
           }
    );

    this.getAllProperties();

    this.commonService.get('getAllLanguage').subscribe((res)=>{
      //console.log(res);
      console.log(res,'getAllLanguage');
      this.AllLanguage=res.data;
  
  
    });


   }

   getAllProperties(){
     
     //this.search.minPrice=+this.search.minPrice;
     //this.search.maxPrice=+this.search.maxPrice;
	 console.log(this.search,' after parse all search field');
    this.commonService.post('getAllProperties',this.search).subscribe((res)=>{
        let Jres=JSON.parse(res._body);
        console.log(Jres,' after parse all properties');
        this.properties=Jres.data;
        this.markers=Jres.data;
       console.log(this.markers,' after parse all markers');
	   this.commonService.hideLoader();
    });
    
   }

  ngOnInit() {

	this.stateGroupOptions = this.contact_form.get('stateGroup')!.valueChanges
      .pipe(
        startWith(''),
        map(value => this._filterGroup(value))
      );

    this.commonService.get('getPropertyTypes').subscribe((res)=>{
        console.log(res,'getPropertyTypes');
        this.propertyTypes=res.data;

    }); 
   this.commonService.get('getSearchData').subscribe((res)=>{
        console.log(res,'getSearchData');
        /*this.autoGroups=[{
						    letter: 'Projects',
						    names: res.locations
						  }, {
						    letter: 'Location',
						    names: res.properties
						  }];*/
		this.autoGroups = [
        CreateNewAutocompleteGroup(
            'Enter Landmark, Location or Project',
            'completer',
            res.data,
            {titleKey: 'label', childrenKey: null}
        ),
    ];				  


        console.log(this.autoGroups,'this.autoGroups');
    }); 

    this.commonService.getStaticPageData({'page_type':'property_listings'}).subscribe((res)=>{
        //console.log(res);
        
        this.commonService.updateTitle(res.data.meta_title_en);
        this.commonService.updateDescription(res.data.meta_desc_en);
    });
     	
  }
  
  

  /*ngAfterViewInit() {
    console.log(this.agmMap);
    this.agmMap.mapReady.subscribe(map => {
      const bounds: LatLngBounds = new google.maps.LatLngBounds();
      for (const mm of this.markers) {
        bounds.extend(new google.maps.LatLng(mm.latitude, mm.longitude));
      }
      map.fitBounds(bounds);
    });
  }*/
  
contact_form: FormGroup = this.fb.group({
    stateGroup: '',
  });

  stateGroups: StateGroup[] = [{
    letter: 'Projects',
    names: ['Alabama', 'Alaska', 'Arizona', 'Arkansas']
  }, {
    letter: 'Location',
    names: ['California', 'Colorado', 'Connecticut']
  }];

  stateGroupOptions: Observable<StateGroup[]>;


  private _filterGroup(value: string): StateGroup[] {
    if (value) {
      return this.stateGroups
        .map(group => ({letter: group.letter, names: _filter(group.names, value)}))
        .filter(group => group.names.length > 0);
    }

    return this.stateGroups;
  }



  
  
 
  updateSelectedCharacters(event) {
    console.log(event);
    this.search.propertyType = this.search.propertyType || [];
    if (event.target.checked) {
          if (this.search.propertyType.indexOf(event.target.name) < 0) { 
                this.search.propertyType.push(event.target.name);

          }
     } else {
           if (this.search.propertyType.indexOf(event.target.name) > -1) 
            {
                this.search.propertyType.splice(this.search.propertyType.indexOf(event.target.name), 1);              
            }
    }
    console.log("search.propertyType: ", this.search.propertyType);    
  }
  


    

    changeMinPrice(event){
        console.log(event.value,'min price');
        this.search.minPrice=event.value;
    }

    changeMaxPrice(event){
        console.log(event.value,'max price');
        this.search.maxPrice=event.value;
    }

    /*changeAutoField(event){
       console.log(event.target.value,'changeAutoField');
       this.search.autoField=event.target.value;
    }*/


    onSubmit() {
       this.search.type='Sell';
	   //this.submitted = true;
	   console.log(this.search,'searchSubmit');
	   this.getAllProperties();
    }

    onSubmit1() {
       this.search.type='Rent';
	   //this.submitted = true;
	   console.log(this.search,'searchSubmit1');
	   this.getAllProperties();
    }
	
	changeAutoField(event){
	
       console.log(event,'changeAutoField');
       this.search.autoField=event.item.id;
	   
    }


}
interface marker {
	latitude: number;
	longitude: number;
	label?: string;
	draggable: boolean;
}

